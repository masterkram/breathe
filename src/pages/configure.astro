---
import Layout from "../layouts/Layout.astro";
import BreathingExercise from "../components/BreathingExercise.astro";
---

<Layout title="Configure your own breathing exercise">
  <div class="max-w-3xl mx-auto px-4 py-8">
    <h1 class="text-2xl font-bold mb-6">
      Configure your own breathing exercise
    </h1>

    <form id="breathing-form" class="space-y-4 mb-8">
      <div class="grid grid-cols-2 gap-4">
        <div>
          <label for="inhale-time" class="block text-sm font-medium mb-1"
            >Inhale time (seconds)</label
          >
          <input
            type="number"
            id="inhale-time"
            name="inhaleTime"
            min="1"
            max="20"
            value="4"
            class="block w-full rounded-md bg-black/5 dark:bg-white/5 px-3 py-1.5 text-base dark:text-white text-zinc-800 outline -outline-offset-1 outline-zinc-300 dark:outline-white/10 dark:placeholder:text-gray-500 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-500 sm:text-sm/6"
            required
          />
        </div>
        <div>
          <label for="hold-time" class="block text-sm font-medium mb-1"
            >Hold time (seconds)</label
          >
          <input
            type="number"
            id="hold-time"
            name="holdTime"
            min="0"
            max="20"
            value="4"
            class="block w-full rounded-md bg-black/5 dark:bg-white/5 px-3 py-1.5 text-base dark:text-white text-zinc-800 outline -outline-offset-1 outline-zinc-300 dark:outline-white/10 dark:placeholder:text-gray-500 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-500 sm:text-sm/6"
          />
        </div>
        <div>
          <label for="exhale-time" class="block text-sm font-medium mb-1"
            >Exhale time (seconds)</label
          >
          <input
            type="number"
            id="exhale-time"
            name="exhaleTime"
            min="1"
            max="20"
            value="4"
            class="block w-full rounded-md bg-black/5 dark:bg-white/5 px-3 py-1.5 text-base dark:text-white text-zinc-800 outline -outline-offset-1 outline-zinc-300 dark:outline-white/10 dark:placeholder:text-gray-500 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-500 sm:text-sm/6"
            required
          />
        </div>
        <div>
          <label for="bottom-hold-time" class="block text-sm font-medium mb-1"
            >Bottom hold time (seconds)</label
          >
          <input
            type="number"
            id="bottom-hold-time"
            name="bottomHoldTime"
            min="0"
            max="20"
            value="0"
            class="block w-full rounded-md bg-black/5 dark:bg-white/5 px-3 py-1.5 text-base dark:text-white text-zinc-800 outline -outline-offset-1 outline-zinc-300 dark:outline-white/10 dark:placeholder:text-gray-500 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-500 sm:text-sm/6"
          />
        </div>
      </div>
      <div>
        <label for="rounds" class="block text-sm font-medium mb-1">Rounds</label
        >
        <input
          type="number"
          id="rounds"
          name="rounds"
          min="1"
          max="10"
          value="3"
          class="block w-full rounded-md bg-black/5 dark:bg-white/5 px-3 py-1.5 text-base dark:text-white text-zinc-800 outline -outline-offset-1 outline-zinc-300 dark:outline-white/10 dark:placeholder:text-gray-500 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-500 sm:text-sm/6"
          required
        />
      </div>

      <div class="flex space-x-4 pt-4">
        <a
          href="/breathe"
          id="breathe-link"
          class="rounded-md bg-blue-500 px-2.5 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-blue-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-500"
        >
          Go to Breathing Page
        </a>
      </div>
    </form>

    <div id="shareable-link-container" class="hidden mt-8">
      <h2 class="text-xl font-semibold mb-4">Shareable Link</h2>
      <div class="flex items-center space-x-2">
        <input
          type="text"
          id="shareable-link"
          class="block w-full rounded-md bg-black/5 dark:bg-white/5 px-3 py-1.5 text-base dark:text-white text-zinc-800 outline -outline-offset-1 outline-zinc-300 dark:outline-white/10 dark:placeholder:text-gray-500 focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-500 sm:text-sm/6"
          readonly
        />
        <button
          id="copy-link"
          class="px-3 py-1.5 bg-zinc-200 dark:bg-zinc-700 rounded hover:bg-zinc-300 dark:hover:bg-zinc-600 transition-colors"
        >
          Copy
        </button>
      </div>
    </div>
  </div>
</Layout>

<script>
  const form = document.getElementById("breathing-form") as HTMLFormElement;
  const breatheLink = document.getElementById(
    "breathe-link",
  ) as HTMLAnchorElement;
  const shareableContainer = document.getElementById(
    "shareable-link-container",
  );
  const shareableLink = document.getElementById(
    "shareable-link",
  ) as HTMLInputElement;
  const copyLinkButton = document.getElementById("copy-link");

  if (
    !form ||
    !breatheLink ||
    !shareableContainer ||
    !shareableLink ||
    !copyLinkButton
  ) {
    throw new Error("Required elements not found");
  }

  interface BreathingConfig {
    inhaleTime: number;
    holdTime: number;
    exhaleTime: number;
    bottomHoldTime: number;
    rounds: number;
  }

  function getFormValues(): BreathingConfig {
    const formData = new FormData(form);

    return {
      inhaleTime: parseInt(formData.get("inhaleTime") as string) || 4,
      holdTime: parseInt(formData.get("holdTime") as string) || 0,
      exhaleTime: parseInt(formData.get("exhaleTime") as string) || 4,
      bottomHoldTime: parseInt(formData.get("bottomHoldTime") as string) || 0,
      rounds: parseInt(formData.get("rounds") as string) || 3,
    };
  }

  function generateQueryString(values: BreathingConfig): string {
    const params = new URLSearchParams();
    Object.entries(values).forEach(([key, value]) => {
      params.append(key, String(value));
    });
    return params.toString();
  }

  function updateShareableLink(values: BreathingConfig): void {
    const origin = window.location.origin;
    const queryString = generateQueryString(values);
    const url = `${origin}/breathe?${queryString}`;

    shareableLink.value = url;
    breatheLink.href = `/breathe?${queryString}`;

    if (shareableContainer) {
      shareableContainer.classList.remove("hidden");
    }
  }

  // On form change, update the link
  form.addEventListener("input", () => {
    const values = getFormValues();
    updateShareableLink(values);
  });

  // Fill form from URL parameters if they exist
  window.addEventListener("load", () => {
    const params = new URLSearchParams(window.location.search);

    if (params.has("inhaleTime")) {
      (document.getElementById("inhale-time") as HTMLInputElement).value =
        params.get("inhaleTime") || "4";
    }
    if (params.has("holdTime")) {
      (document.getElementById("hold-time") as HTMLInputElement).value =
        params.get("holdTime") || "4";
    }
    if (params.has("exhaleTime")) {
      (document.getElementById("exhale-time") as HTMLInputElement).value =
        params.get("exhaleTime") || "4";
    }
    if (params.has("bottomHoldTime")) {
      (document.getElementById("bottom-hold-time") as HTMLInputElement).value =
        params.get("bottomHoldTime") || "0";
    }
    if (params.has("rounds")) {
      (document.getElementById("rounds") as HTMLInputElement).value =
        params.get("rounds") || "3";
    }

    // Generate initial shareable link
    const values = getFormValues();
    updateShareableLink(values);
  });

  // Copy link button
  copyLinkButton.addEventListener("click", () => {
    shareableLink.select();
    document.execCommand("copy");

    // Indicate copied
    const originalText = copyLinkButton.textContent;
    copyLinkButton.textContent = "Copied!";
    setTimeout(() => {
      copyLinkButton.textContent = originalText;
    }, 2000);
  });
</script>
