---
import Layout from "../layouts/Layout.astro";
import BreathingExercise from "../components/BreathingExercise.astro";
---

<Layout title="Configure your own breathing exercise">
  <div class="max-w-2xl mx-auto px-4 py-8">
    <h1 class="text-2xl font-bold mb-6">
      Configure your own breathing exercise
    </h1>

    <form id="breathing-form" class="space-y-4 mb-8">
      <div class="grid grid-cols-2 gap-4">
        <div>
          <label for="inhale-time" class="block text-sm font-medium mb-1"
            >Inhale time (seconds)</label
          >
          <input
            type="number"
            id="inhale-time"
            name="inhaleTime"
            min="1"
            max="20"
            value="4"
            class="w-full p-2 border rounded"
            required
          />
        </div>
        <div>
          <label for="hold-time" class="block text-sm font-medium mb-1"
            >Hold time (seconds)</label
          >
          <input
            type="number"
            id="hold-time"
            name="holdTime"
            min="0"
            max="20"
            value="4"
            class="w-full p-2 border rounded"
          />
        </div>
        <div>
          <label for="exhale-time" class="block text-sm font-medium mb-1"
            >Exhale time (seconds)</label
          >
          <input
            type="number"
            id="exhale-time"
            name="exhaleTime"
            min="1"
            max="20"
            value="4"
            class="w-full p-2 border rounded"
            required
          />
        </div>
        <div>
          <label for="bottom-hold-time" class="block text-sm font-medium mb-1"
            >Bottom hold time (seconds)</label
          >
          <input
            type="number"
            id="bottom-hold-time"
            name="bottomHoldTime"
            min="0"
            max="20"
            value="0"
            class="w-full p-2 border rounded"
          />
        </div>
      </div>
      <div>
        <label for="rounds" class="block text-sm font-medium mb-1">Rounds</label
        >
        <input
          type="number"
          id="rounds"
          name="rounds"
          min="1"
          max="10"
          value="3"
          class="w-full p-2 border rounded"
          required
        />
      </div>

      <div class="flex space-x-4 pt-4">
        <button
          type="button"
          id="preview-button"
          class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
        >
          Preview Exercise
        </button>
        <a
          href="/breathe"
          id="breathe-link"
          class="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors"
        >
          Go to Breathing Page
        </a>
      </div>
    </form>

    <div id="preview-container" class="hidden">
      <h2 class="text-xl font-semibold mb-4">Preview</h2>
      <div id="breathing-preview" class="p-4 border rounded-lg bg-gray-50">
        <!-- Preview will be inserted here -->
      </div>
    </div>

    <div id="shareable-link-container" class="hidden mt-8">
      <h2 class="text-xl font-semibold mb-4">Shareable Link</h2>
      <div class="flex items-center space-x-2">
        <input
          type="text"
          id="shareable-link"
          class="flex-1 p-2 border border-zinc-200 dark:border-zinc-700 rounded bg-zinc-50 dark:bg-zinc-800"
          readonly
        />
        <button
          id="copy-link"
          class="px-3 py-2 bg-zinc-200 dark:bg-zinc-700 rounded hover:bg-zinc-300 dark:hover:bg-zinc-600 transition-colors"
        >
          Copy
        </button>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { startExercise, stopExercise } from "../stores/breathingStore";

  const form = document.getElementById("breathing-form") as HTMLFormElement;
  const previewButton = document.getElementById("preview-button");
  const breatheLink = document.getElementById(
    "breathe-link",
  ) as HTMLAnchorElement;
  const previewContainer = document.getElementById("preview-container");
  const previewDiv = document.getElementById("breathing-preview");
  const shareableContainer = document.getElementById(
    "shareable-link-container",
  );
  const shareableLink = document.getElementById(
    "shareable-link",
  ) as HTMLInputElement;
  const copyLinkButton = document.getElementById("copy-link");

  if (
    !form ||
    !previewButton ||
    !breatheLink ||
    !previewContainer ||
    !previewDiv ||
    !shareableContainer ||
    !shareableLink ||
    !copyLinkButton
  ) {
    throw new Error("Required elements not found");
  }

  interface BreathingConfig {
    inhaleTime: number;
    holdTime: number;
    exhaleTime: number;
    bottomHoldTime: number;
    rounds: number;
  }

  function getFormValues(): BreathingConfig {
    const formData = new FormData(form);

    return {
      inhaleTime: parseInt(formData.get("inhaleTime") as string) || 4,
      holdTime: parseInt(formData.get("holdTime") as string) || 0,
      exhaleTime: parseInt(formData.get("exhaleTime") as string) || 4,
      bottomHoldTime: parseInt(formData.get("bottomHoldTime") as string) || 0,
      rounds: parseInt(formData.get("rounds") as string) || 3,
    };
  }

  function generateQueryString(values: BreathingConfig): string {
    const params = new URLSearchParams();
    Object.entries(values).forEach(([key, value]) => {
      params.append(key, String(value));
    });
    return params.toString();
  }

  function updateShareableLink(values: BreathingConfig): void {
    const origin = window.location.origin;
    const queryString = generateQueryString(values);
    const url = `${origin}/breathe?${queryString}`;

    shareableLink.value = url;
    breatheLink.href = `/breathe?${queryString}`;

    if (shareableContainer) {
      shareableContainer.classList.remove("hidden");
    }
  }

  // On form change, update the link
  form.addEventListener("input", () => {
    const values = getFormValues();
    updateShareableLink(values);
  });

  // Fill form from URL parameters if they exist
  window.addEventListener("load", () => {
    const params = new URLSearchParams(window.location.search);

    if (params.has("inhaleTime")) {
      (document.getElementById("inhale-time") as HTMLInputElement).value =
        params.get("inhaleTime") || "4";
    }
    if (params.has("holdTime")) {
      (document.getElementById("hold-time") as HTMLInputElement).value =
        params.get("holdTime") || "4";
    }
    if (params.has("exhaleTime")) {
      (document.getElementById("exhale-time") as HTMLInputElement).value =
        params.get("exhaleTime") || "4";
    }
    if (params.has("bottomHoldTime")) {
      (document.getElementById("bottom-hold-time") as HTMLInputElement).value =
        params.get("bottomHoldTime") || "0";
    }
    if (params.has("rounds")) {
      (document.getElementById("rounds") as HTMLInputElement).value =
        params.get("rounds") || "3";
    }

    // Generate initial shareable link
    const values = getFormValues();
    updateShareableLink(values);
  });

  // Preview button
  previewButton.addEventListener("click", () => {
    const values = getFormValues();

    // Toggle preview
    if (previewContainer.classList.contains("hidden")) {
      previewContainer.classList.remove("hidden");

      // Create and inject a minimal preview
      previewDiv.innerHTML = `
        <div class="text-center">
          <p class="mb-2"><strong>Inhale:</strong> ${values.inhaleTime}s | <strong>Hold:</strong> ${values.holdTime}s | <strong>Exhale:</strong> ${values.exhaleTime}s | <strong>Bottom Hold:</strong> ${values.bottomHoldTime}s</p>
          <p class="mb-4"><strong>Rounds:</strong> ${values.rounds}</p>
          <div class="flex justify-center items-center space-x-4">
            <div id="preview-circle" class="w-24 h-24 rounded-full bg-blue-500 opacity-80 transition-all duration-1000"></div>
            <div id="preview-text" class="text-lg font-medium"></div>
          </div>
          <button id="preview-start" class="mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors">Start Preview</button>
        </div>
      `;

      const previewCircle = document.getElementById("preview-circle");
      const previewText = document.getElementById("preview-text");
      const previewStart = document.getElementById("preview-start");

      if (!previewCircle || !previewText || !previewStart) return;

      let isPreviewRunning = false;
      let currentStep = 0;
      let timeoutId: number | null = null;

      previewStart.addEventListener("click", () => {
        if (isPreviewRunning) {
          if (timeoutId !== null) {
            clearTimeout(timeoutId);
          }
          previewStart.textContent = "Start Preview";
          if (previewText) previewText.textContent = "";
          if (previewCircle) previewCircle.style.transform = "scale(1)";
          isPreviewRunning = false;
          currentStep = 0;
          return;
        }

        isPreviewRunning = true;
        previewStart.textContent = "Stop Preview";

        function runStep() {
          if (!isPreviewRunning) return;

          const steps = [
            {
              name: "Inhale",
              duration: values.inhaleTime,
              style: "scale(1.5) translateY(-20px)",
            },
            {
              name: "Hold",
              duration: values.holdTime,
              style: "scale(1.5) translateY(-20px)",
            },
            {
              name: "Exhale",
              duration: values.exhaleTime,
              style: "scale(0.7) translateY(20px)",
            },
            {
              name: "Bottom Hold",
              duration: values.bottomHoldTime,
              style: "scale(0.7) translateY(20px)",
            },
          ];

          // Skip steps with zero duration
          if (steps[currentStep].duration === 0) {
            currentStep = (currentStep + 1) % steps.length;
            runStep();
            return;
          }

          const step = steps[currentStep];
          if (previewText) previewText.textContent = step.name;
          if (previewCircle) previewCircle.style.transform = step.style;

          timeoutId = setTimeout(() => {
            currentStep = (currentStep + 1) % steps.length;
            runStep();
          }, step.duration * 1000) as unknown as number;
        }

        runStep();
      });
    } else {
      previewContainer.classList.add("hidden");
    }
  });

  // Copy link button
  copyLinkButton.addEventListener("click", () => {
    shareableLink.select();
    document.execCommand("copy");

    // Indicate copied
    const originalText = copyLinkButton.textContent;
    copyLinkButton.textContent = "Copied!";
    setTimeout(() => {
      copyLinkButton.textContent = originalText;
    }, 2000);
  });
</script>
